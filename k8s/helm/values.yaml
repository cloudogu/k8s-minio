lokiServiceAccountSecretName: "k8s-minio-service-account-loki"
global:
  networkPolicies:
    enabled: true
  imagePullSecrets:
    - "ces-container-registries"
  security:
    allowInsecureImages: true
upgradeContainer:
  kubectl:
    image:
      registry: "docker.io"
      repository: "bitnamilegacy/kubectl"
      tag: "1.33.1"
minio:
  image:
    registry: "docker.io"
    repository: "bitnamilegacy/minio"
    tag: "2025.6.13-debian-12-r0"
  clientImage:
    registry: "docker.io"
    repository: "bitnamilegacy/minio-client"
    tag: "2025.5.21-debian-12-r6"
  networkPolicy:
    enabled: false
  resources:
    limits:
      memory: 300M
    requests:
      cpu: 100m
      memory: 300M
  commonLabels:
    app: ces
    app.kubernetes.io/name: k8s-minio
  console:
    enabled: false
    image:
      registry: "docker.io"
      repository: "bitnamilegacy/minio-object-browser"
      tag: "2.0.2-debian-12-r0"
  auth:
    existingSecret: "k8s-minio-root-user"
  provisioning:
    enabled: true
    resources:
      limits:
        memory: 249M
      requests:
        cpu: 100m
        memory: 249M
    networkPolicy:
      enabled: false
    usersExistingSecrets: ["k8s-minio-service-account-provisioning"]
    buckets:
      - name: "loki-log-bucket"
        versioning: false
  defaultInitContainers:
    volumePermissions:
      image:
        registry: "docker.io"
        repository: "bitnamilegacy/os-shell"
        tag: "12-debian-12-r47"
# serviceAccount is only needed for the minio secret. We don't create the minio secret,
# because we define our own auth secret in minio.auth.existingSecret. Thus, it can be deactivated.
  serviceAccount:
    create: false
  automountServiceAccountToken: false
